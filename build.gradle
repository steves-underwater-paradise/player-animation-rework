//file:noinspection GroovyAccessibility
//file:noinspection GroovyAssignabilityCheck
//file:noinspection DependencyNotationArgument

plugins {
    id "architectury-plugin" version "${architectury_plugin_version}"
    id "dev.architectury.loom" version "${architectury_loom_version}" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = "${rootProject.java_version}" as int
    }

    apply plugin: "architectury-plugin"
    apply plugin: "dev.architectury.loom"
    apply plugin: "com.github.johnrengelman.shadow"

    version = "${rootProject.mod_version}+mc${rootProject.supported_minecraft_version_name}"
    group = rootProject.maven_group

    base {
        archivesName = "${rootProject.mod_id}-${project.name}"
    }

    repositories {
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }
        maven { url = "https://maven.kosmx.dev/" }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered {
            it.mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
            it.mappings("dev.architectury:yarn-mappings-patch-neoforge:1.21+build.4")
        }
    }

    java {
        withSourcesJar()
    }

    sourceSets {
        test {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    def commonSubProjectPath = ":common"
    def commonSubProject = project(commonSubProjectPath)
    if (project.name.contains("common")) {
        architectury {
            common(rootProject.enabled_platforms.split(","))
        }
    } else {
        architectury {
            platformSetupLoomIde()
        }

        configurations {
            common
            shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files
            compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            developmentFabric.extendsFrom common
        }

        dependencies {
            common(project(path: commonSubProjectPath, configuration: "namedElements")) { transitive false }
        }

        processResources {
            inputs.property "version", rootProject.version

            from(commonSubProject.sourceSets["main"].resources) {
                include("assets/**", "data/**", "resourcepacks/**")
            }
        }

        shadowJar {
            exclude "architectury.common.json"

            configurations = [project.configurations.shadowCommon]
            archiveClassifier = "dev-shadow"
        }

        remapJar {
            inputFile.set shadowJar.archiveFile
            dependsOn shadowJar
        }

        sourcesJar {
            def commonSources = commonSubProject.sourcesJar
            dependsOn commonSources
            from commonSources.archiveFile.map { zipTree(it) }
        }

        components.java {
            withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
                skip()
            }
        }
    }

    if (project.name.contains("neoforge")) {
        architectury {
            neoForge()
        }

        repositories {
            maven { url "https://maven.neoforged.net/releases/" }
        }

        dependencies {
            // NeoForge
            neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

            shadowCommon(project(path: commonSubProjectPath, configuration: "transformProductionNeoForge")) { transitive false }
        }

        processResources {
            filesMatching("mods.toml") {
                expand "version": project.version,
                        "mod_id": rootProject.mod_id,
                        "mod_name": rootProject.mod_name,
                        "mod_description": rootProject.mod_description,
                        "mod_license": rootProject.mod_license,
                        "git_repository_host": rootProject.git_repository_host,
                        "git_organization": rootProject.git_organization,
                        "curseforge_project_id": rootProject.curseforge_project_id,
                        "modrinth_project_id": rootProject.modrinth_project_id,
                        "supported_minecraft_version": rootProject.supported_minecraft_version,
                        "neoforge_version": rootProject.neoforge_version,
                        "architectury_api_version": rootProject.architectury_api_version
            }
        }

        shadowJar {
            exclude "fabric.mod.json"
        }
    } else if (project.name.contains("fabric")) {
        architectury {
            fabric()
        }

        dependencies {
            shadowCommon(project(path: commonSubProjectPath, configuration: "transformProductionFabric")) { transitive false }
        }

        processResources {
            filesMatching("fabric.mod.json") {
                expand "version": project.version,
                        "mod_id": rootProject.mod_id,
                        "mod_name": rootProject.mod_name,
                        "mod_description": rootProject.mod_description,
                        "mod_license": rootProject.mod_license,
                        "git_repository_host": rootProject.git_repository_host,
                        "git_organization": rootProject.git_organization,
                        "curseforge_project_id": rootProject.curseforge_project_id,
                        "modrinth_project_id": rootProject.modrinth_project_id,
                        "supported_minecraft_version": rootProject.supported_minecraft_version,
                        "fabric_loader_version": rootProject.fabric_loader_version,
                        "fabric_api_version": rootProject.fabric_api_version,
                        "architectury_api_version": rootProject.architectury_api_version
            }
        }
    }
}
