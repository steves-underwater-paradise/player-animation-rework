//file:noinspection GroovyAccessibility
//file:noinspection GroovyAssignabilityCheck
//file:noinspection DependencyNotationArgument

apply plugin: "architectury-plugin"

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "maven-publish"

    base {
        archivesName = "${rootProject.mod_id}-${project.getName()}"
    }

    repositories {
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    }

    processResources {
        inputs.property "version", project.version

        from(project(":common").sourceSets["main"].resources) {
            include("assets", "data", "resourcepacks")
        }

        filesMatching(["fabric.mod.json", "mods.toml"]) {
            expand "version": project.version,
                    "mod_id": rootProject.mod_id,
                    "mod_name": rootProject.mod_name,
                    "mod_description": rootProject.mod_description,
                    "mod_license": rootProject.mod_license,
                    "git_repository_host": rootProject.git_repository_host,
                    "git_organization": rootProject.git_organization,
                    "curseforge_project_id": rootProject.curseforge_project_id,
                    "modrinth_project_id": rootProject.modrinth_project_id,
                    "supported_minecraft_version": rootProject.supported_minecraft_version,
                    "fabric_loader_version": rootProject.fabric_loader_version,
                    "forge_version": rootProject.neoforge_version,
                    "fabric_api_version": rootProject.fabric_api_version,
                    "architectury_api_version": rootProject.architectury_api_version
        }
    }

    java {
        withSourcesJar()
    }

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${rootProject.mod_id}" }
        }
    }

    publishing {
        publications {
            mavenCommon(MavenPublication) {
                groupId = rootProject.maven_group
                artifactId = base.getArchivesName()
                from components.java
            }
        }

        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("${rootProject.maven_repository}/${rootProject.mod_id}")
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }

    // Clean the previous build output of the root project and all subprojects before building
    tasks.named("build") {
        dependsOn(clean, subprojects.clean)
    }

    if (!project.getName().contains("common")) {
        configurations {
            common
            shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files
            compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            developmentFabric.extendsFrom common
        }

        shadowJar {
            exclude "fabric.mod.json"
            exclude "architectury.common.json"

            configurations = [project.configurations.shadowCommon]
            archiveClassifier = "dev-shadow"
        }

        remapJar {
            inputFile.set shadowJar.archiveFile
            dependsOn shadowJar
        }

        sourcesJar {
            def commonSources = project(":common").sourcesJar
            dependsOn commonSources
            from commonSources.archiveFile.map { zipTree(it) }
        }

        components.java {
            withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
                skip()
            }
        }
    }
}

allprojects {
    apply plugin: "architectury-plugin"

    version = "${rootProject.mod_version}+mc${rootProject.supported_minecraft_version_name}"
    group = rootProject.maven_group

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = "${rootProject.java_version}" as int
    }
}
